2024-08-01T10:20:46.499513Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("lidar"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: Some(CustomNode { source: "build/lidar/build/test", args: None, envs: None, build: None, send_stdout_as: None, run_config: NodeRunConfig { inputs: {}, outputs: {DataId("scan")} } }), operator: None, path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("amcl"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: Some(CustomNode { source: "build/amcl/build/test", args: None, envs: None, build: None, send_stdout_as: None, run_config: NodeRunConfig { inputs: {DataId("scan"): Input { mapping: User(UserInputMapping { source: NodeId("lidar"), output: DataId("scan") }), queue_size: None }, DataId("tick"): Input { mapping: Timer { interval: 1ms }, queue_size: None }, DataId("twist"): Input { mapping: User(UserInputMapping { source: NodeId("teb"), output: DataId("twist") }), queue_size: None }}, outputs: {DataId("pose")} } }), operator: None, path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("teb"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: Some(CustomNode { source: "build/teb/build/test", args: None, envs: None, build: None, send_stdout_as: None, run_config: NodeRunConfig { inputs: {DataId("pose"): Input { mapping: User(UserInputMapping { source: NodeId("amcl"), output: DataId("pose") }), queue_size: None }, DataId("scan"): Input { mapping: User(UserInputMapping { source: NodeId("lidar"), output: DataId("scan") }), queue_size: None }, DataId("tick"): Input { mapping: Timer { interval: 100ms }, queue_size: None }}, outputs: {DataId("twist")} } }), operator: None, path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }] } working_dir="/home/xiling/Desktop/1/dora_nav"}: dora_coordinator::run: successfully spawned dataflow `01910d74-d61f-7917-b730-297360b16123`
2024-08-01T10:21:12.241195Z  INFO dora_coordinator: successfully send stop dataflow `01910d74-d61f-7917-b730-297360b16123` to all daemons
2024-08-01T10:21:35.218425Z ERROR dora_coordinator::control: failed to send reply
2024-08-02T02:14:40.034233Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("lidar"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: Some(CustomNode { source: "build/lidar/build/test", args: None, envs: None, build: None, send_stdout_as: None, run_config: NodeRunConfig { inputs: {}, outputs: {DataId("scan")} } }), operator: None, path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("amcl"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: Some(CustomNode { source: "build/amcl/build/test", args: None, envs: None, build: None, send_stdout_as: None, run_config: NodeRunConfig { inputs: {DataId("scan"): Input { mapping: User(UserInputMapping { source: NodeId("lidar"), output: DataId("scan") }), queue_size: None }, DataId("tick"): Input { mapping: Timer { interval: 1ms }, queue_size: None }, DataId("twist"): Input { mapping: User(UserInputMapping { source: NodeId("teb"), output: DataId("twist") }), queue_size: None }}, outputs: {DataId("pose")} } }), operator: None, path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("teb"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: Some(CustomNode { source: "build/teb/build/test", args: None, envs: None, build: None, send_stdout_as: None, run_config: NodeRunConfig { inputs: {DataId("pose"): Input { mapping: User(UserInputMapping { source: NodeId("amcl"), output: DataId("pose") }), queue_size: None }, DataId("scan"): Input { mapping: User(UserInputMapping { source: NodeId("lidar"), output: DataId("scan") }), queue_size: None }, DataId("tick"): Input { mapping: Timer { interval: 100ms }, queue_size: None }}, outputs: {DataId("twist")} } }), operator: None, path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }] } working_dir="/home/sunny/dora_nav"}: dora_coordinator::run: successfully spawned dataflow `019110de-269f-7d80-94fc-dffa534b1099`
2024-08-02T02:14:57.240360Z  INFO dora_coordinator: successfully send stop dataflow `019110de-269f-7d80-94fc-dffa534b1099` to all daemons
2024-08-02T02:15:32.014767Z ERROR dora_coordinator::control: failed to send reply
